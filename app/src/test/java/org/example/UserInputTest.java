/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.junit.Assert;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.Scanner;

import static junit.framework.TestCase.assertEquals;
import static org.example.ConsoleCommands.readUserInput;

public class UserInputTest {

    private String executeWithInput(String input, String prompt) {
        ByteArrayInputStream in = new ByteArrayInputStream(input.getBytes());
        Scanner sc = new Scanner(in);

        // capture what's printed to the console
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        System.setOut(new PrintStream(out));


        String result = readUserInput(sc,prompt);

        // reset the system
        System.setOut(System.out);

        // return the captured output
        return out + " " + result;
    }


    @Test
    public void testReadUserInput_ValidInput() {
        String input = "Hello \n";
        String prompt = "Please enter your name";

        String output = executeWithInput(input, prompt);
        System.out.println(output);
        assertEquals("Please enter your name: Hello", output);
    }

    @Test
    public void testReadUserInput_EmptyInputRetry() {
        /*
         * Simulated Input:
         *
         * The input "\nJohn\n" simulates two user inputs:
         * \n (an empty input because the user simply presses Enter without typing anything).
         * John\n (the second input when the user correctly enters "John").
         */
        String prompt = "Title";
        String input = "\nJohn\n";

        String output = executeWithInput(input, prompt);

        String expectedOutput = """
            Title:Title darf nicht leer sein. Bitte erneut eingeben:\n John
        """.trim();
        assertEquals(expectedOutput, output);
    }

    @Test
    public void TestShowCommands() {

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        System.setOut(new PrintStream(out));
        ConsoleCommands commands = new ConsoleCommands();
        commands.showCommands();

        System.setOut(System.out);

        // Expected output
        String expectedOutput = """
                
                Liste von verfügbaren Befehlen:
                ===============================
                add         Ein buch zur Bibliothek hinzufügen
                loeschen    Ein Buch aus der Bibliothek entfernen
                help        Die ganze Liste von Befehlen anzeigen
                exit        Das Programm beenden
                list        Die Liste der Bücher anzeigen
                version     Die aktuelle version anzeigen
                """.stripIndent();

        // Compare expected and actual output
        Assert.assertEquals(expectedOutput.trim(), out.toString().trim());


    }
}
